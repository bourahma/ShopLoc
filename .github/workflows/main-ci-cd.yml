name: Build on DockerHub and Deploy to OpenStack

on:
  push:
    branches:
      - main

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IP_BE_ADDRESS: ${{ secrets.IP_BE_ADDRESS }}
  IP_FE_ADDRESS: ${{ secrets.IP_FE_ADDRESS }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: shoploc-db
          POSTGRES_USER: shoplocU
          POSTGRES_PASSWORD: shoplocP
        ports:
          - 5430:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # CI  Tests
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Clean project
        run: |
          cd shoploc-be
          mvn clean

      - name: Run Tests
        run: |
          cd shoploc-be
          mvn verify

      # CI Sonar
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd shoploc-be
          mvn verify
          mvn jacoco:report # Generate Java code coverage report

          # Upload the JaCoCo report to SonarQube
          mvn sonar:sonar -Dsonar.projectKey=bourahma_ShopLoc -Dsonar.coverage.jacoco.xmlReportPaths=**/target/site/jacoco/jacoco.xml
  build-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set production profile
        run: |
          sed -i 's/spring.profiles.active=dev/spring.profiles.active=prod/g' ./shoploc-be/src/main/resources/application.properties

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push shoploc-be image on docker hub.
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./shoploc-be
          push: true
          dockerfile: Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/shoploc-be:latest

      # Build and push shoploc-be image on docker hub.
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./shoploc-fe
          push: true
          dockerfile: Dockerfile
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/shoploc-fe:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Install VPN to access OpenStack with univ lille credentials
      - name: Install OpenVPN Client
        run: sudo apt-get update && sudo apt-get install openvpn

      - name: Download VPN Configuration
        run: |
            wget https://infotuto.univ-lille.fr/fileadmin/user_upload/infotuto/images/DSI/Fichiers_telechargeables/Clients_VPN/ULILLE_VPN_ETUDIANT_Linux_v4.zip
            unzip ULILLE_VPN_ETUDIANT_Linux_v4.zip

      - name: OpenVPN-Connect
        uses: kota65535/github-openvpn-connect-action@v2.1.0
        with:
          config_file: ULILLE_VPN_ETU_TCP_v4_Linux.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}

      - name: Checkout code
        uses: actions/checkout@v2

      # Login to docker hub.
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Set permissions for private key
        run:
          chmod 600 shoploc.pem

      # Deploy shoploc-be on OpenStack instance.
      - name: Pull shoploc-be docker image
        run: |
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_BE_ADDRESS 'sudo docker pull bourahma/shoploc-be:latest'
      - name: Stop running shoploc-be-container
        run: |
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_BE_ADDRESS 'sudo docker stop shoploc-be-container || true'
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_BE_ADDRESS 'sudo docker rm shoploc-be-container || true'
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_BE_ADDRESS 'docker rmi -f $(sudo docker images -aq) || true'
      - name: Run new shoploc-be-container
        run: |
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_BE_ADDRESS 'sudo docker run -d --name shoploc-be-container -p 80:8080 bourahma/shoploc-be:latest'

      # Deploy shoploc-fe on OpenStack instance.
      - name: Pull shoploc-fe docker image
        run: |
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_FE_ADDRESS 'sudo docker pull bourahma/shoploc-fe:latest'
      - name: Stop running shoploc-fe-container
        run: |
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_FE_ADDRESS 'sudo docker stop shoploc-fe-container || true'
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_FE_ADDRESS 'sudo docker rm shoploc-fe-container || true'
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_FE_ADDRESS 'docker rmi -f $(sudo docker images -aq) || true'
      - name: Run new shoploc-fe-container
        run: |
          ssh -i shoploc.pem -o StrictHostKeyChecking=no ubuntu@$IP_FE_ADDRESS 'sudo docker run -d --name shoploc-fe-container -p 80:3000 bourahma/shoploc-fe:latest'
